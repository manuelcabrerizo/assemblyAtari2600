------- FILE bomber.asm LEVEL 1 PASS 2
      1  fffe					      processor	6502
      2  10000 ????
      3  10000 ????						; Include required files with VCS register memory mapping and macros
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????						;-------------------------------------------------------------------------------
     45  10000 ????						; TIA_BASE_ADDRESS
     46  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     47  10000 ????						; Normally 0, the base address should (externally, before including this file)
     48  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     49  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     50  10000 ????						; < $40 as a bankswitch.
     51  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     52  10000 ????			   -TIA_BASE_ADDRESS =	0
     53  10000 ????				       ENDIF
     54  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     55  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     56  10000 ????						; *OR* by declaring the label before including this file, eg:
     57  10000 ????						; TIA_BASE_ADDRESS = $40
     58  10000 ????						;   include "vcs.h"
     59  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     60  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     61  10000 ????						; for the mirrored ROM hardware registers.
     62  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     63  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     64  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     65  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     66  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     67  10000 ????				       ENDIF
     68  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     69  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     70  10000 ????				       ENDIF
     71  10000 ????						;-------------------------------------------------------------------------------
     72 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     73 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     74 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     75 U0000
     76 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     77 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     78 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     79 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     80 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     81 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     82 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     83 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     84 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     85 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     86 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     87 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
     88 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
     89 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
     90 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
     91 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
     92 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
     93 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
     94 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
     95 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
     96 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
     97 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
     98 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
     99 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    100 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    101 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    102 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    103 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    104 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    105 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    106 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    107 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    108 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    109 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    110 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    111 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    112 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    113 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    114 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    115 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    116 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    117 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    118 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    119 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    120 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    121 U002d
    122 U002d							;-------------------------------------------------------------------------------
    123 U000e ????				      SEG.U	TIA_REGISTERS_READ
    124 U0000					      ORG	TIA_BASE_READ_ADDRESS
    125 U0000							;											bit 7	 bit 6
    126 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    127 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    128 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    129 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    130 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    131 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    132 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    133 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    134 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    135 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    136 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    137 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    138 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    139 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    140 U000e							;-------------------------------------------------------------------------------
    141 U0298 ????				      SEG.U	RIOT
    142 U0280					      ORG	$280
    143 U0280
    144 U0280							; RIOT MEMORY MAP
    145 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    146 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    147 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    148 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    149 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    150 U0284		       00	   INTIM      ds	1	; $284		Timer output
    151 U0285		       00	   TIMINT     ds	1	; $285
    152 U0286							; Unused/undefined registers ($285-$294)
    153 U0286		       00		      ds	1	; $286
    154 U0287		       00		      ds	1	; $287
    155 U0288		       00		      ds	1	; $288
    156 U0289		       00		      ds	1	; $289
    157 U028a		       00		      ds	1	; $28A
    158 U028b		       00		      ds	1	; $28B
    159 U028c		       00		      ds	1	; $28C
    160 U028d		       00		      ds	1	; $28D
    161 U028e		       00		      ds	1	; $28E
    162 U028f		       00		      ds	1	; $28F
    163 U0290		       00		      ds	1	; $290
    164 U0291		       00		      ds	1	; $291
    165 U0292		       00		      ds	1	; $292
    166 U0293		       00		      ds	1	; $293
    167 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    168 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    169 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    170 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    171 U0298							;-------------------------------------------------------------------------------
    172 U0298							; The following required for back-compatibility with code which does not use
    173 U0298							; segments.
    174  0000 ????				      SEG
    175  0000 ????						; EOF
------- FILE bomber.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE bomber.asm
      6  0000 ????
      7  0000 ????						; Declare the variables starting from memory address $80
      8 U009c ????				      seg.u	Variables
      9 U0080					      org	$80
     10 U0080
     11 U0080		       00	   JetXPos    byte.b		; player0 x-position
     12 U0081		       00	   JetYPos    byte.b		; player0 y-position
     13 U0082		       00	   BomberXPos byte.b		; player1 x-position
     14 U0083		       00	   BomberYPos byte.b		; player1 y-position
     15 U0084		       00	   MissileXPox byte.b		; missile x-position
     16 U0085		       00	   MissileYPox byte.b		; missile y-position
     17 U0086		       00	   Score      byte.b		; 2-digit score stored as BCD
     18 U0087		       00	   Timer      byte.b		; 2-digit timer stored as BCD
     19 U0088		       00	   Temp       byte.b		; auxiliary variable to store temp values
     20 U0089		       00 00	   OnesDigitOffset word.w		; lookup table offset for the score 1's digit
     21 U008b		       00 00	   TensDigitOffset word.w		; lookup table offset for the score 10's digit
     22 U008d		       00 00	   JetSpritePtr word.w		; pointer to player0 sprite table
     23 U008f		       00 00	   JetColorPtr word.w		; pointer to player0 color table
     24 U0091		       00 00	   BomberSpritePtr word.w		; pointer to player1 sprite table
     25 U0093		       00 00	   BomberColorPtr word.w		; pointer to player1 color table
     26 U0095		       00 00	   JetAnimationOffset word.w		; player0 sprite frame offset for amination
     27 U0097		       00	   Random     byte.b		; random number generated
     28 U0098		       00	   ScoreSprite byte.b		; store the sprite bit pattern for score
     29 U0099		       00	   TimerSprite byte.b		; store the sprite bit pattern for timer
     30 U009a		       00	   TerrainColor byte.b		; store the color of the terrain
     31 U009b		       00	   RiverColor byte.b		; store the color of the river
     32 U009c
     33 U009c
     34 U009c							; define constants
     35 U009c		       00 09	   JET_HEIGHT =	9	; player0 sprite hegiht 
     36 U009c		       00 09	   BOMBER_HEIGHT =	9	; player1 sprite hegiht
     37 U009c		       00 05	   DIGITS_HEIGHT =	5	; scoreboard digit height
     38 U009c
     39 U009c							; Start our ROM code at memory address $F000
     40  10000 ????				       seg	code
     41  f000					      org	$F000
     42  f000
     43  f000				   Reset
      0  f000					      CLEAN_START		; class macro to reset memory and registers
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     45  f00b
     46  f00b							; initialize RAM variables and TIA registers
     47  f00b		       a9 0a		      lda	#10
     48  f00d		       85 81		      sta	JetYPos	; JetYPos = 10
     49  f00f		       a9 3c		      lda	#60
     50  f011		       85 80		      sta	JetXPos	; JetXPos = 60
     51  f013		       a9 53		      lda	#83
     52  f015		       85 83		      sta	BomberYPos	; BomberYPos = 83
     53  f017		       a9 36		      lda	#54
     54  f019		       85 82		      sta	BomberXPos	; BomberXPos = 54
     55  f01b		       a9 d4		      lda	#%11010100
     56  f01d		       85 97		      sta	Random	; Random = $D4
     57  f01f		       a9 00		      lda	#0
     58  f021		       85 86		      sta	Score
     59  f023		       85 87		      sta	Timer	; Score = Timer = 0
     60  f025
     61  f025							; Declare a macro to check if we display the missile
     62  f025					      MAC	draw_missile
     63  f025							;...x has the number of the scanline
     64  f025					      lda	#%00000000
     65  f025					      cpx	MissileYPox	; compare x with missile y-position
     66  f025					      bne	.SkipMissileDraw	; if x is not equal to missile y-position skip draw
     67  f025				   .DrawMissile
     68  f025					      lda	#%00000010
     69  f025					      inc	MissileYPox
     70  f025				   .SkipMissileDraw
     71  f025					      sta	ENAM0
     72  f025					      ENDM
     73  f025
     74  f025							; initialize the pointers to the correct lookup table adresses
     75  f025		       a9 39		      lda	#<PlayerSprite0
     76  f027		       85 8d		      sta	JetSpritePtr	; lo-byte pointer for jet sprite lookup table
     77  f029		       a9 f3		      lda	#>PlayerSprite0
     78  f02b		       85 8e		      sta	JetSpritePtr+1	; hi-byte pointer for jet sprite lookup table
     79  f02d
     80  f02d		       a9 4b		      lda	#<PlayerColor0
     81  f02f		       85 8f		      sta	JetColorPtr	; lo-byte pointer for jet color lookup table
     82  f031		       a9 f3		      lda	#>PlayerColor0
     83  f033		       85 90		      sta	JetColorPtr+1	; hi-byte pointer for jet color lookup table
     84  f035
     85  f035		       a9 5d		      lda	#<BomberSprite
     86  f037		       85 91		      sta	BomberSpritePtr	; lo-byte pointer for bomber sprite lookup table
     87  f039		       a9 f3		      lda	#>BomberSprite
     88  f03b		       85 92		      sta	BomberSpritePtr+1	; hi-byte pointer for bomber sprite lookup table
     89  f03d
     90  f03d		       a9 66		      lda	#<BomberColor
     91  f03f		       85 93		      sta	BomberColorPtr	; lo-byte pointer for bomber color lookup table
     92  f041		       a9 f3		      lda	#>BomberColor
     93  f043		       85 94		      sta	BomberColorPtr+1	; hi-byte pointer for bomber color lookup table
     94  f045
     95  f045							; Start the main display loop and frame rendering
     96  f045				   StartFrame
     97  f045
     98  f045
     99  f045
    100  f045							; Display VSYNC and VBLANK
    101  f045		       a9 02		      lda	#2
    102  f047		       85 01		      sta	VBLANK	; turn on VBLANK
    103  f049		       85 00		      sta	VSYNC	; turn on VSYNC
    104  f04b					      REPEAT	3
    105  f04b		       85 02		      sta	WSYNC	; display the 3 recomended line of VSYNC
    104  f04b					      REPEND
    105  f04d		       85 02		      sta	WSYNC	; display the 3 recomended line of VSYNC
    104  f04d					      REPEND
    105  f04f		       85 02		      sta	WSYNC	; display the 3 recomended line of VSYNC
    106  f051					      REPEND
    107  f051		       a9 00		      lda	#0
    108  f053		       85 00		      sta	VSYNC	; turn off VSYNC
    109  f055
    110  f055					      REPEAT	32
    111  f055		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
    110  f055					      REPEND
    111  f057		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
    110  f057					      REPEND
    111  f059		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
    110  f059					      REPEND
    111  f05b		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
    110  f05b					      REPEND
    111  f05d		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
    110  f05d					      REPEND
    111  f05f		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
    110  f05f					      REPEND
    111  f061		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
    110  f061					      REPEND
    111  f063		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
    110  f063					      REPEND
    111  f065		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
    110  f065					      REPEND
    111  f067		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
    110  f067					      REPEND
    111  f069		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
    110  f069					      REPEND
    111  f06b		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
    110  f06b					      REPEND
    111  f06d		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
    110  f06d					      REPEND
    111  f06f		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
    110  f06f					      REPEND
    111  f071		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
    110  f071					      REPEND
    111  f073		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
    110  f073					      REPEND
    111  f075		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
    110  f075					      REPEND
    111  f077		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
    110  f077					      REPEND
    111  f079		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
    110  f079					      REPEND
    111  f07b		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
    110  f07b					      REPEND
    111  f07d		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
    110  f07d					      REPEND
    111  f07f		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
    110  f07f					      REPEND
    111  f081		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
    110  f081					      REPEND
    111  f083		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
    110  f083					      REPEND
    111  f085		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
    110  f085					      REPEND
    111  f087		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
    110  f087					      REPEND
    111  f089		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
    110  f089					      REPEND
    111  f08b		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
    110  f08b					      REPEND
    111  f08d		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
    110  f08d					      REPEND
    111  f08f		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
    110  f08f					      REPEND
    111  f091		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
    110  f091					      REPEND
    111  f093		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
    112  f095					      REPEND
    113  f095
    114  f095							;**************************************************************************************
    115  f095							; Calculate and tasks performed in the VBLANK
    116  f095		       a5 80		      lda	JetXPos
    117  f097		       a0 00		      ldy	#0
    118  f099		       20 8b f2 	      jsr	SetObjectXPos	; set player0 horizonta position
    119  f09c
    120  f09c		       a5 82		      lda	BomberXPos
    121  f09e		       a0 01		      ldy	#1
    122  f0a0		       20 8b f2 	      jsr	SetObjectXPos	; set player1 horizonta position
    123  f0a3
    124  f0a3		       a5 84		      lda	MissileXPox
    125  f0a5		       a0 02		      ldy	#2
    126  f0a7		       20 8b f2 	      jsr	SetObjectXPos	; set missile horizonta position
    127  f0aa
    128  f0aa		       20 c8 f2 	      jsr	CalculateDigitOffset	; calculate the scoreboard digit lookup table offset
    129  f0ad
    130  f0ad		       20 6b f2 	      jsr	GeneratrJetSound	; configure and enable JetEgnine audio
    131  f0b0
    132  f0b0		       85 02		      sta	WSYNC
    133  f0b2		       85 2a		      sta	HMOVE	; apply the horizonta positions
    134  f0b4
    135  f0b4		       a9 00		      lda	#0
    136  f0b6		       85 01		      sta	VBLANK	; turn off VBLANK
    137  f0b8
    138  f0b8							;*************************************************************************************
    139  f0b8							; Display the scoreboard lines
    140  f0b8		       a9 00		      lda	#0	; clear TIA registers before each frame
    141  f0ba		       85 09		      sta	COLUBK
    142  f0bc		       85 0d		      sta	PF0
    143  f0be		       85 0e		      sta	PF1
    144  f0c0		       85 0f		      sta	PF2
    145  f0c2		       85 1b		      sta	GRP0
    146  f0c4		       85 1c		      sta	GRP1
    147  f0c6		       85 0a		      sta	CTRLPF
    148  f0c8
    149  f0c8		       a9 1e		      lda	#$1E
    150  f0ca		       85 08		      sta	COLUPF
    151  f0cc
    152  f0cc		       a2 05		      ldx	#DIGITS_HEIGHT	; start the X counter whit the value 5
    153  f0ce
    154  f0ce				   .ScoreDigitLoop
    155  f0ce		       a4 8b		      ldy	TensDigitOffset	; get the ten's digit offset for the score
    156  f0d0		       b9 e9 f2 	      lda	Digits,Y	; load the bit pattern from lookup table
    157  f0d3		       29 f0		      and	#$F0	; mask the hight-bits
    158  f0d5		       85 98		      sta	ScoreSprite	; save the score tens digit in a variable
    159  f0d7
    160  f0d7		       a4 89		      ldy	OnesDigitOffset
    161  f0d9		       b9 e9 f2 	      lda	Digits,Y
    162  f0dc		       29 0f		      and	#$0F
    163  f0de		       05 98		      ora	ScoreSprite	; add the new bits with the bit that i save before
    164  f0e0		       85 98		      sta	ScoreSprite	; save it
    165  f0e2		       85 02		      sta	WSYNC	; wait for scanline
    166  f0e4		       85 0e		      sta	PF1
    167  f0e6
    168  f0e6		       a4 8c		      ldy	TensDigitOffset+1	; get the left digit offset for the timer
    169  f0e8		       b9 e9 f2 	      lda	Digits,Y
    170  f0eb		       29 f0		      and	#$F0
    171  f0ed		       85 99		      sta	TimerSprite
    172  f0ef
    173  f0ef		       a4 8a		      ldy	OnesDigitOffset+1
    174  f0f1		       b9 e9 f2 	      lda	Digits,Y
    175  f0f4		       29 0f		      and	#$0F
    176  f0f6		       05 99		      ora	TimerSprite
    177  f0f8		       85 99		      sta	TimerSprite
    178  f0fa
    179  f0fa		       20 e8 f2 	      jsr	Sleep12Cycles	; waste 12 cycles
    180  f0fd
    181  f0fd		       85 0e		      sta	PF1	; update playfield for timer display
    182  f0ff
    183  f0ff		       a4 98		      ldy	ScoreSprite	; preload for the next scanline
    184  f101		       85 02		      sta	WSYNC
    185  f103
    186  f103		       84 0e		      sty	PF1	; update playfield for the score display
    187  f105		       e6 8b		      inc	TensDigitOffset
    188  f107		       e6 8c		      inc	TensDigitOffset+1
    189  f109		       e6 89		      inc	OnesDigitOffset
    190  f10b		       e6 8a		      inc	OnesDigitOffset+1
    191  f10d
    192  f10d		       20 e8 f2 	      jsr	Sleep12Cycles
    193  f110
    194  f110		       ca		      dex		; X--
    195  f111		       85 0e		      sta	PF1
    196  f113		       d0 b9		      bne	.ScoreDigitLoop	; if dex != 0, then branch to ScoreDigitLoop
    197  f115
    198  f115		       85 02		      sta	WSYNC
    199  f117
    200  f117		       a9 00		      lda	#0
    201  f119		       85 0d		      sta	PF0
    202  f11b		       85 0e		      sta	PF1
    203  f11d		       85 0f		      sta	PF2
    204  f11f		       85 02		      sta	WSYNC
    205  f121		       85 02		      sta	WSYNC
    206  f123		       85 02		      sta	WSYNC
    207  f125
    208  f125
    209  f125							; Display the 96 visible scan lines of our main game (beacouse 2-line kernel) 
    210  f125				   GameVisibleLines
    211  f125		       a5 9a		      lda	TerrainColor
    212  f127		       85 08		      sta	COLUPF
    213  f129		       a5 9b		      lda	RiverColor
    214  f12b		       85 09		      sta	COLUBK
    215  f12d		       a9 01		      lda	#%00000001	; enable playfield reflection
    216  f12f		       85 0a		      sta	CTRLPF
    217  f131		       a9 f0		      lda	#$F0
    218  f133		       85 0d		      sta	PF0
    219  f135		       a9 fc		      lda	#$FC
    220  f137		       85 0e		      sta	PF1
    221  f139		       a9 00		      lda	#0
    222  f13b		       85 0f		      sta	PF2
    223  f13d
    224  f13d		       a2 55		      ldx	#85	; X count the number of remainig scanlines
    225  f13f				   .GameLineLoop
      0  f13f					      DRAW_MISSILE		; macro to check if we should draw the missile
      1  f13f
      2  f13f		       a9 00		      lda	#%00000000
      3  f141		       e4 85		      cpx	MissileYPox
      4  f143		       d0 04		      bne	.SkipMissileDraw
      5  f145				   .DrawMissile
      6  f145		       a9 02		      lda	#%00000010
      7  f147		       e6 85		      inc	MissileYPox
      8  f149				   .SkipMissileDraw
      9  f149		       85 1d		      sta	ENAM0
    227  f14b
    228  f14b							;********************************************************************************
    229  f14b				   .AreWeInsideJetSprite
    230  f14b		       8a		      txa		; transfer x to A
    231  f14c		       38		      sec		; make sure the carry flag is set before subtraction
    232  f14d		       e5 81		      sbc	JetYPos	; subtract sprite Y-coord
    233  f14f		       c9 09		      cmp	#JET_HEIGHT	; are we inside the sprite
    234  f151		       90 02		      bcc	.DrawSpriteP0	; if result < SpriteHeight, call the draw routine
    235  f153		       a9 00		      lda	#0	; else, set lookup index to zero
    236  f155				   .DrawSpriteP0
    237  f155		       18		      clc		; clear carry-flag before addition
    238  f156		       65 95		      adc	JetAnimationOffset	; jump to the correct sprite frame address in memory 
    239  f158		       a8		      tay		; load Y so we can work whit the pointer
    240  f159		       b1 8d		      lda	(JetSpritePtr),Y	; load player0 bitmap from lookup table
    241  f15b		       85 02		      sta	WSYNC	; wait for scanLine
    242  f15d		       85 1b		      sta	GRP0	; set graphics for player0
    243  f15f		       b1 8f		      lda	(JetColorPtr),Y	; load player0 color from lookup table
    244  f161		       85 06		      sta	COLUP0	; set color for player0
    245  f163							;********************************************************************************
    246  f163				   .AreWeInsideBomberSprite
    247  f163		       8a		      txa		; transfer x to A
    248  f164		       38		      sec		; make sure the carry flag is set before subtraction
    249  f165		       e5 83		      sbc	BomberYPos	; subtract sprite Y-coord
    250  f167		       c9 09		      cmp	#BOMBER_HEIGHT	; are we inside the sprite
    251  f169		       90 02		      bcc	.DrawSpriteP1	; if result < SpriteHeight, call the draw routine
    252  f16b		       a9 00		      lda	#0	; else, set lookup index to zero
    253  f16d				   .DrawSpriteP1
    254  f16d		       a8		      tay		; load Y so we can work whit the pointer
    255  f16e
    256  f16e		       a9 05		      lda	#%00000101
    257  f170		       85 05		      sta	NUSIZ1	; stretch player 1 sprite
    258  f172
    259  f172		       b1 91		      lda	(BomberSpritePtr),Y	; load player1 bitmap from lookup table
    260  f174		       85 02		      sta	WSYNC	; wait for scanLine
    261  f176		       85 1c		      sta	GRP1	; set graphics for player1
    262  f178		       b1 93		      lda	(BomberColorPtr),Y	; load player1 color from lookup table
    263  f17a		       85 07		      sta	COLUP1	; set color for player1
    264  f17c							;********************************************************************************
    265  f17c
    266  f17c		       ca		      dex		; X--
    267  f17d		       d0 c0		      bne	.GameLineLoop	; repeat next main game scanline until finished
    268  f17f
    269  f17f		       a9 00		      lda	#0
    270  f181		       85 95		      sta	JetAnimationOffset
    271  f183
    272  f183		       85 02		      sta	WSYNC
    273  f185
    274  f185							; Display Overscan
    275  f185		       a9 02		      lda	#2
    276  f187		       85 01		      sta	VBLANK	; turn on VBLANK again
    277  f189					      REPEAT	30
    278  f189		       85 02		      sta	WSYNC	; Display 30 recomended scanlines
    277  f189					      REPEND
    278  f18b		       85 02		      sta	WSYNC	; Display 30 recomended scanlines
    277  f18b					      REPEND
    278  f18d		       85 02		      sta	WSYNC	; Display 30 recomended scanlines
    277  f18d					      REPEND
    278  f18f		       85 02		      sta	WSYNC	; Display 30 recomended scanlines
    277  f18f					      REPEND
    278  f191		       85 02		      sta	WSYNC	; Display 30 recomended scanlines
    277  f191					      REPEND
    278  f193		       85 02		      sta	WSYNC	; Display 30 recomended scanlines
    277  f193					      REPEND
    278  f195		       85 02		      sta	WSYNC	; Display 30 recomended scanlines
    277  f195					      REPEND
    278  f197		       85 02		      sta	WSYNC	; Display 30 recomended scanlines
    277  f197					      REPEND
    278  f199		       85 02		      sta	WSYNC	; Display 30 recomended scanlines
    277  f199					      REPEND
    278  f19b		       85 02		      sta	WSYNC	; Display 30 recomended scanlines
    277  f19b					      REPEND
    278  f19d		       85 02		      sta	WSYNC	; Display 30 recomended scanlines
    277  f19d					      REPEND
    278  f19f		       85 02		      sta	WSYNC	; Display 30 recomended scanlines
    277  f19f					      REPEND
    278  f1a1		       85 02		      sta	WSYNC	; Display 30 recomended scanlines
    277  f1a1					      REPEND
    278  f1a3		       85 02		      sta	WSYNC	; Display 30 recomended scanlines
    277  f1a3					      REPEND
    278  f1a5		       85 02		      sta	WSYNC	; Display 30 recomended scanlines
    277  f1a5					      REPEND
    278  f1a7		       85 02		      sta	WSYNC	; Display 30 recomended scanlines
    277  f1a7					      REPEND
    278  f1a9		       85 02		      sta	WSYNC	; Display 30 recomended scanlines
    277  f1a9					      REPEND
    278  f1ab		       85 02		      sta	WSYNC	; Display 30 recomended scanlines
    277  f1ab					      REPEND
    278  f1ad		       85 02		      sta	WSYNC	; Display 30 recomended scanlines
    277  f1ad					      REPEND
    278  f1af		       85 02		      sta	WSYNC	; Display 30 recomended scanlines
    277  f1af					      REPEND
    278  f1b1		       85 02		      sta	WSYNC	; Display 30 recomended scanlines
    277  f1b1					      REPEND
    278  f1b3		       85 02		      sta	WSYNC	; Display 30 recomended scanlines
    277  f1b3					      REPEND
    278  f1b5		       85 02		      sta	WSYNC	; Display 30 recomended scanlines
    277  f1b5					      REPEND
    278  f1b7		       85 02		      sta	WSYNC	; Display 30 recomended scanlines
    277  f1b7					      REPEND
    278  f1b9		       85 02		      sta	WSYNC	; Display 30 recomended scanlines
    277  f1b9					      REPEND
    278  f1bb		       85 02		      sta	WSYNC	; Display 30 recomended scanlines
    277  f1bb					      REPEND
    278  f1bd		       85 02		      sta	WSYNC	; Display 30 recomended scanlines
    277  f1bd					      REPEND
    278  f1bf		       85 02		      sta	WSYNC	; Display 30 recomended scanlines
    277  f1bf					      REPEND
    278  f1c1		       85 02		      sta	WSYNC	; Display 30 recomended scanlines
    277  f1c1					      REPEND
    278  f1c3		       85 02		      sta	WSYNC	; Display 30 recomended scanlines
    279  f1c5					      REPEND
    280  f1c5		       a9 00		      lda	#0
    281  f1c7		       85 01		      sta	VBLANK	; turn off VBLANK
    282  f1c9
    283  f1c9							; Process joystick input for player0
    284  f1c9				   CheckP0Up
    285  f1c9		       a9 10		      lda	#%00010000	; player0 joystick up
    286  f1cb		       2c 80 02 	      bit	SWCHA
    287  f1ce		       d0 0c		      bne	CheckP0Down	; if bit pattern doesnt match bypass
    288  f1d0				   .P0IsUp
    289  f1d0		       a5 81		      lda	JetYPos
    290  f1d2		       c9 46		      cmp	#70
    291  f1d4		       10 06		      bpl	CheckP0Down
    292  f1d6		       e6 81		      inc	JetYPos
    293  f1d8		       a9 00		      lda	#0
    294  f1da		       85 95		      sta	JetAnimationOffset
    295  f1dc
    296  f1dc				   CheckP0Down
    297  f1dc		       a9 20		      lda	#%00100000
    298  f1de		       2c 80 02 	      bit	SWCHA
    299  f1e1		       d0 0c		      bne	CheckP0Left
    300  f1e3				   .P0IsDown
    301  f1e3		       a5 81		      lda	JetYPos
    302  f1e5		       c9 05		      cmp	#5
    303  f1e7		       30 06		      bmi	CheckP0Left
    304  f1e9		       c6 81		      dec	JetYPos
    305  f1eb		       a9 00		      lda	#0
    306  f1ed		       85 95		      sta	JetAnimationOffset
    307  f1ef
    308  f1ef				   CheckP0Left
    309  f1ef		       a9 40		      lda	#%01000000
    310  f1f1		       2c 80 02 	      bit	SWCHA
    311  f1f4		       d0 0c		      bne	CheckP0Right
    312  f1f6				   .P0IsLeft
    313  f1f6		       a5 80		      lda	JetXPos
    314  f1f8		       c9 23		      cmp	#35
    315  f1fa		       30 06		      bmi	CheckP0Right
    316  f1fc		       c6 80		      dec	JetXPos
    317  f1fe		       a9 09		      lda	#JET_HEIGHT	; 9
    318  f200		       85 95		      sta	JetAnimationOffset	; set JetAnimationOffset to the second frame
    319  f202
    320  f202				   CheckP0Right
    321  f202		       a9 80		      lda	#%10000000
    322  f204		       2c 80 02 	      bit	SWCHA
    323  f207		       d0 0c		      bne	CheckButtonPress
    324  f209				   .P0IsRight
    325  f209		       a5 80		      lda	JetXPos
    326  f20b		       c9 64		      cmp	#100
    327  f20d		       10 06		      bpl	CheckButtonPress
    328  f20f		       e6 80		      inc	JetXPos
    329  f211		       a9 09		      lda	#JET_HEIGHT	; 9
    330  f213		       85 95		      sta	JetAnimationOffset	; set JetAnimationOffset to the second frame
    331  f215
    332  f215				   CheckButtonPress
    333  f215		       a9 80		      lda	#%10000000
    334  f217		       24 0c		      bit	INPT4
    335  f219		       d0 0e		      bne	EndInput
    336  f21b				   .ButtonIsPress
    337  f21b		       a5 80		      lda	JetXPos	; load the x and y position of the Jet to set the Missile position
    338  f21d		       18		      clc
    339  f21e		       69 04		      adc	#4
    340  f220		       85 84		      sta	MissileXPox
    341  f222		       a5 81		      lda	JetYPos
    342  f224		       18		      clc
    343  f225		       69 07		      adc	#7
    344  f227		       85 85		      sta	MissileYPox
    345  f229
    346  f229				   EndInput		; fallback when no input
    347  f229
    348  f229							; Calculations to update positions form next frame
    349  f229				   UpdateBomberPosition
    350  f229		       a5 83		      lda	BomberYPos
    351  f22b		       18		      clc
    352  f22c		       c9 00		      cmp	#0	; compare bomber Y position whit zero
    353  f22e		       30 05		      bmi	.ResetBomberPosition	; if is < 0, reset y pos back to the top
    354  f230		       c6 83		      dec	BomberYPos	; else, decrement enemy y position
    355  f232		       4c 41 f2 	      jmp	EndPositionUpdate
    356  f235				   .ResetBomberPosition
    357  f235		       20 aa f2 	      jsr	GetRandomBomberPosition	; call subroutine for next random enemy x position
    358  f238
    359  f238							; use BCD to show friendly decimal values for the score and timer
    360  f238				   .SetScoreValues
    361  f238		       f8		      sed		; set decimal mode for score and timer
    362  f239
    363  f239		       a5 87		      lda	Timer
    364  f23b		       18		      clc
    365  f23c		       69 01		      adc	#1
    366  f23e		       85 87		      sta	Timer
    367  f240
    368  f240		       d8		      cld		; disble decimal mode 
    369  f241
    370  f241				   EndPositionUpdate		; fallback for the position update
    371  f241
    372  f241							; Check for object collitision
    373  f241				   CheckCollitionP0P1
    374  f241		       a9 80		      lda	#%10000000	; CXPPMM bit 7 detects P0 and P1 collition
    375  f243		       24 07		      bit	CXPPMM	; check CXPPMM bit 7 with the above pattern
    376  f245		       d0 06		      bne	.CollitionP0P1	; collition hapend
    377  f247		       20 82 f2 	      jsr	SetTerrainRiverColor	; set playfield color to green and blue
    378  f24a		       4c 50 f2 	      jmp	CheckCollitionM0P1
    379  f24d				   .CollitionP0P1
    380  f24d		       20 9f f2 	      jsr	GameOver
    381  f250
    382  f250				   CheckCollitionM0P1
    383  f250		       a9 80		      lda	#%10000000
    384  f252		       24 00		      bit	CXM0P
    385  f254		       d0 03		      bne	.CollitionM0P1
    386  f256		       4c 66 f2 	      jmp	EndCollitionCheck
    387  f259				   .CollitionM0P1
    388  f259		       f8		      sed
    389  f25a		       a5 86		      lda	Score
    390  f25c		       18		      clc
    391  f25d		       69 01		      adc	#1
    392  f25f		       85 86		      sta	Score	; adds one to the score using decimal mode
    393  f261		       d8		      cld
    394  f262		       a9 00		      lda	#0
    395  f264		       85 85		      sta	MissileYPox
    396  f266
    397  f266				   EndCollitionCheck		; fallback
    398  f266		       85 2c		      sta	CXCLR	; reset collition flags
    399  f268
    400  f268							; Loop back to Start a brand new frame
    401  f268		       4c 45 f0 	      jmp	StartFrame	; continue to display next frame
    402  f26b
    403  f26b							; subroutine to generate audio for the Jet base on the Jet y-position
    404  f26b				   GeneratrJetSound subroutine
    405  f26b		       a9 03		      lda	#3
    406  f26d		       85 19		      sta	AUDV0
    407  f26f
    408  f26f		       a5 81		      lda	JetYPos
    409  f271		       4a		      lsr
    410  f272		       4a		      lsr
    411  f273		       4a		      lsr
    412  f274		       85 88		      sta	Temp
    413  f276		       a9 19		      lda	#25
    414  f278		       38		      sec
    415  f279		       e5 88		      sbc	Temp
    416  f27b		       85 17		      sta	AUDF0
    417  f27d
    418  f27d		       a9 08		      lda	#8
    419  f27f		       85 15		      sta	AUDC0
    420  f281
    421  f281		       60		      rts
    422  f282
    423  f282
    424  f282				   SetTerrainRiverColor subroutine
    425  f282		       a9 c2		      lda	#$C2
    426  f284		       85 9a		      sta	TerrainColor
    427  f286		       a9 84		      lda	#$84
    428  f288		       85 9b		      sta	RiverColor
    429  f28a		       60		      rts
    430  f28b
    431  f28b							; subroutine to handle horizonta position
    432  f28b				   SetObjectXPos subroutine
    433  f28b		       85 02		      sta	WSYNC	; start a fresh new scanline
    434  f28d		       38		      sec		; make sure carry-flag is set before subs
    435  f28e				   .Div15Loop
    436  f28e		       e9 0f		      sbc	#15	; subtract 15 from the accumulator
    437  f290		       b0 fc		      bcs	.Div15Loop	; loop until carry-flag is clear
    438  f292		       49 07		      eor	#7	; handle offset range from -8 to 7
    439  f294		       0a		      asl
    440  f295		       0a		      asl
    441  f296		       0a		      asl
    442  f297		       0a		      asl		; four shift lefts to get only the top 4 bits
    443  f298		       99 20 00 	      sta	HMP0,Y	; store the fine offset to the correct HMxx
    444  f29b		       99 10 00 	      sta	RESP0,Y	; fix object position in 15-step increment
    445  f29e		       60		      rts
    446  f29f
    447  f29f							; game over subroutine
    448  f29f				   GameOver   subroutine
    449  f29f		       a9 30		      lda	#$30
    450  f2a1		       85 9a		      sta	TerrainColor	; set terrain color to red
    451  f2a3		       85 9b		      sta	RiverColor	; set river color to red
    452  f2a5		       a9 00		      lda	#0
    453  f2a7		       85 86		      sta	Score	; Score = 0
    454  f2a9		       60		      rts
    455  f2aa
    456  f2aa							; subroutine to generate random number
    457  f2aa				   GetRandomBomberPosition subroutine
    458  f2aa		       a5 97		      lda	Random
    459  f2ac		       0a		      asl
    460  f2ad		       45 97		      eor	Random
    461  f2af		       0a		      asl
    462  f2b0		       45 97		      eor	Random
    463  f2b2		       0a		      asl
    464  f2b3		       0a		      asl
    465  f2b4		       45 97		      eor	Random
    466  f2b6		       0a		      asl
    467  f2b7		       26 97		      rol	Random
    468  f2b9		       4a		      lsr
    469  f2ba		       4a		      lsr		; divide the value by 4 with 2 right shift
    470  f2bb		       85 82		      sta	BomberXPos	; save it to the variable BomberXPos
    471  f2bd		       a9 1e		      lda	#30
    472  f2bf		       65 82		      adc	BomberXPos	; adds 30 + BomberXPos to compensate for left PF
    473  f2c1		       85 82		      sta	BomberXPos	; sets the new value to the BomberXPos
    474  f2c3
    475  f2c3		       a9 60		      lda	#96
    476  f2c5		       85 83		      sta	BomberYPos	; sets the BomberYPos to the top of the screen
    477  f2c7		       60		      rts
    478  f2c8
    479  f2c8							; subroutine to handle scoreboard digits
    480  f2c8							; convert the hegiht and low nibbles of the variable Score and Timer
    481  f2c8							; into the offset if digits lookup table so the values cn by display
    482  f2c8
    483  f2c8							; for the low nibble we need to mutiply by 5
    484  f2c8				   CalculateDigitOffset subroutine
    485  f2c8		       a2 01		      ldx	#1	; X register is the loop counter
    486  f2ca				   .PrepareScoreLoop		; this will loop twice, first X=1, and then X=0
    487  f2ca		       b5 86		      lda	Score,X	; load A whit the Timer when X=1 or Score when X=0
    488  f2cc		       29 0f		      and	#$0F	; remove the 10's digit by masking the bits 00001111
    489  f2ce		       85 88		      sta	Temp	; save the value of the acumulator in to the Temp variable
    490  f2d0		       0a		      asl		; shift left
    491  f2d1		       0a		      asl		; shift left N*4
    492  f2d2		       65 88		      adc	Temp	; add the value saved in A
    493  f2d4		       95 89		      sta	OnesDigitOffset,X	; save A in OnesDigitOffset+1 or OnesDigitOffset+0
    494  f2d6
    495  f2d6		       b5 86		      lda	Score,X	; load A whit the timer
    496  f2d8		       29 f0		      and	#$F0	; remove the 1's digit by masking bits 11110000
    497  f2da		       4a		      lsr		; shift right n/2
    498  f2db		       4a		      lsr		; shift right n/4
    499  f2dc		       85 88		      sta	Temp
    500  f2de		       4a		      lsr
    501  f2df		       4a		      lsr
    502  f2e0		       65 88		      adc	Temp	; add the values (n/16 + n/4)
    503  f2e2		       95 8b		      sta	TensDigitOffset,X	; save A in TensDigitOffset+1 or TensDigitOffset+0
    504  f2e4
    505  f2e4		       ca		      dex		; X--
    506  f2e5		       10 e3		      bpl	.PrepareScoreLoop	; while X >= 0, loop to pass a second time 
    507  f2e7		       60		      rts
    508  f2e8							;Subroutine to waste 12 cycles
    509  f2e8							;jsr = 6 cycles
    510  f2e8							;rts = 6 cycles 
    511  f2e8				   Sleep12Cycles subroutine
    512  f2e8		       60		      rts
    513  f2e9
    514  f2e9
    515  f2e9							; Declare ROM lookup tables
    516  f2e9				   Digits
    517  f2e9		       77		      .byte.b	%01110111
    518  f2ea		       55		      .byte.b	%01010101
    519  f2eb		       55		      .byte.b	%01010101
    520  f2ec		       55		      .byte.b	%01010101
    521  f2ed		       77		      .byte.b	%01110111
    522  f2ee
    523  f2ee		       11		      .byte.b	%00010001
    524  f2ef		       11		      .byte.b	%00010001
    525  f2f0		       11		      .byte.b	%00010001
    526  f2f1		       11		      .byte.b	%00010001
    527  f2f2		       11		      .byte.b	%00010001
    528  f2f3
    529  f2f3		       77		      .byte.b	%01110111
    530  f2f4		       11		      .byte.b	%00010001
    531  f2f5		       77		      .byte.b	%01110111
    532  f2f6		       44		      .byte.b	%01000100
    533  f2f7		       77		      .byte.b	%01110111
    534  f2f8
    535  f2f8		       77		      .byte.b	%01110111
    536  f2f9		       11		      .byte.b	%00010001
    537  f2fa		       33		      .byte.b	%00110011
    538  f2fb		       11		      .byte.b	%00010001
    539  f2fc		       77		      .byte.b	%01110111
    540  f2fd
    541  f2fd		       55		      .byte.b	%01010101
    542  f2fe		       55		      .byte.b	%01010101
    543  f2ff		       77		      .byte.b	%01110111
    544  f300		       11		      .byte.b	%00010001
    545  f301		       11		      .byte.b	%00010001
    546  f302
    547  f302		       77		      .byte.b	%01110111
    548  f303		       44		      .byte.b	%01000100
    549  f304		       77		      .byte.b	%01110111
    550  f305		       11		      .byte.b	%00010001
    551  f306		       77		      .byte.b	%01110111
    552  f307
    553  f307		       77		      .byte.b	%01110111
    554  f308		       44		      .byte.b	%01000100
    555  f309		       77		      .byte.b	%01110111
    556  f30a		       55		      .byte.b	%01010101
    557  f30b		       77		      .byte.b	%01110111
    558  f30c
    559  f30c		       77		      .byte.b	%01110111
    560  f30d		       11		      .byte.b	%00010001
    561  f30e		       11		      .byte.b	%00010001
    562  f30f		       11		      .byte.b	%00010001
    563  f310		       11		      .byte.b	%00010001
    564  f311
    565  f311		       77		      .byte.b	%01110111
    566  f312		       55		      .byte.b	%01010101
    567  f313		       77		      .byte.b	%01110111
    568  f314		       55		      .byte.b	%01010101
    569  f315		       77		      .byte.b	%01110111
    570  f316
    571  f316		       77		      .byte.b	%01110111
    572  f317		       55		      .byte.b	%01010101
    573  f318		       77		      .byte.b	%01110111
    574  f319		       11		      .byte.b	%00010001
    575  f31a		       77		      .byte.b	%01110111
    576  f31b
    577  f31b		       22		      .byte.b	%00100010
    578  f31c		       55		      .byte.b	%01010101
    579  f31d		       77		      .byte.b	%01110111
    580  f31e		       55		      .byte.b	%01010101
    581  f31f		       55		      .byte.b	%01010101
    582  f320
    583  f320		       77		      .byte.b	%01110111
    584  f321		       55		      .byte.b	%01010101
    585  f322		       66		      .byte.b	%01100110
    586  f323		       55		      .byte.b	%01010101
    587  f324		       77		      .byte.b	%01110111
    588  f325
    589  f325		       77		      .byte.b	%01110111
    590  f326		       44		      .byte.b	%01000100
    591  f327		       44		      .byte.b	%01000100
    592  f328		       44		      .byte.b	%01000100
    593  f329		       77		      .byte.b	%01110111
    594  f32a
    595  f32a		       66		      .byte.b	%01100110
    596  f32b		       55		      .byte.b	%01010101
    597  f32c		       55		      .byte.b	%01010101
    598  f32d		       55		      .byte.b	%01010101
    599  f32e		       66		      .byte.b	%01100110
    600  f32f
    601  f32f		       77		      .byte.b	%01110111
    602  f330		       44		      .byte.b	%01000100
    603  f331		       77		      .byte.b	%01110111
    604  f332		       44		      .byte.b	%01000100
    605  f333		       77		      .byte.b	%01110111
    606  f334
    607  f334		       77		      .byte.b	%01110111
    608  f335		       44		      .byte.b	%01000100
    609  f336		       77		      .byte.b	%01110111
    610  f337		       44		      .byte.b	%01000100
    611  f338		       44		      .byte.b	%01000100
    612  f339
    613  f339				   PlayerSprite0
    614  f339		       00		      .byte.b	#%00000000
    615  f33a		       44		      .byte.b	#%01000100
    616  f33b		       7c		      .byte.b	#%01111100
    617  f33c		       38		      .byte.b	#%00111000
    618  f33d		       38		      .byte.b	#%00111000
    619  f33e		       38		      .byte.b	#%00111000
    620  f33f		       10		      .byte.b	#%00010000
    621  f340		       10		      .byte.b	#%00010000
    622  f341		       10		      .byte.b	#%00010000
    623  f342				   PlayerSprite1
    624  f342		       00		      .byte.b	#%00000000
    625  f343		       28		      .byte.b	#%00101000
    626  f344		       38		      .byte.b	#%00111000
    627  f345		       38		      .byte.b	#%00111000
    628  f346		       38		      .byte.b	#%00111000
    629  f347		       10		      .byte.b	#%00010000
    630  f348		       10		      .byte.b	#%00010000
    631  f349		       10		      .byte.b	#%00010000
    632  f34a		       10		      .byte.b	#%00010000
    633  f34b				   PlayerColor0
    634  f34b		       00		      .byte.b	#$00
    635  f34c		       06		      .byte.b	#$06
    636  f34d		       08		      .byte.b	#$08
    637  f34e		       0e		      .byte.b	#$0E
    638  f34f		       0c		      .byte.b	#$0C
    639  f350		       42		      .byte.b	#$42
    640  f351		       1a		      .byte.b	#$1A
    641  f352		       08		      .byte.b	#$08
    642  f353		       0c		      .byte.b	#$0C
    643  f354				   PlayerColor1
    644  f354		       00		      .byte.b	#$00
    645  f355		       06		      .byte.b	#$06
    646  f356		       08		      .byte.b	#$08
    647  f357		       0e		      .byte.b	#$0E
    648  f358		       0c		      .byte.b	#$0C
    649  f359		       42		      .byte.b	#$42
    650  f35a		       1a		      .byte.b	#$1A
    651  f35b		       08		      .byte.b	#$08
    652  f35c		       0c		      .byte.b	#$0C
    653  f35d				   BomberSprite
    654  f35d		       00		      .byte.b	#%00000000
    655  f35e		       08		      .byte.b	#%00001000
    656  f35f		       5d		      .byte.b	#%01011101
    657  f360		       3e		      .byte.b	#%00111110
    658  f361		       1c		      .byte.b	#%00011100
    659  f362		       5d		      .byte.b	#%01011101
    660  f363		       49		      .byte.b	#%01001001
    661  f364		       3e		      .byte.b	#%00111110
    662  f365		       1c		      .byte.b	#%00011100
    663  f366				   BomberColor
    664  f366		       00		      .byte.b	#$00
    665  f367		       30		      .byte.b	#$30
    666  f368		       42		      .byte.b	#$42
    667  f369		       46		      .byte.b	#$46
    668  f36a		       8a		      .byte.b	#$8A
    669  f36b		       42		      .byte.b	#$42
    670  f36c		       42		      .byte.b	#$42
    671  f36d		       48		      .byte.b	#$48
    672  f36e		       32		      .byte.b	#$32
    673  f36f
    674  f36f							; Complete ROM size with 4KB
    675  fffc					      org	$FFFC	; move origin to position $FFFC
    676  fffc		       00 f0		      word.w	Reset	; write 2 bytes with the program reset address
    677  fffe		       00 f0		      word.w	Reset

------- FILE bomber.asm LEVEL 1 PASS 2
      1  fffe					      processor	6502
      2  10000 ????
      3  10000 ????						; Include required files with VCS register memory mapping and macros
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????						;-------------------------------------------------------------------------------
     45  10000 ????						; TIA_BASE_ADDRESS
     46  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     47  10000 ????						; Normally 0, the base address should (externally, before including this file)
     48  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     49  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     50  10000 ????						; < $40 as a bankswitch.
     51  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     52  10000 ????			   -TIA_BASE_ADDRESS =	0
     53  10000 ????				       ENDIF
     54  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     55  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     56  10000 ????						; *OR* by declaring the label before including this file, eg:
     57  10000 ????						; TIA_BASE_ADDRESS = $40
     58  10000 ????						;   include "vcs.h"
     59  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     60  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     61  10000 ????						; for the mirrored ROM hardware registers.
     62  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     63  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     64  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     65  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     66  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     67  10000 ????				       ENDIF
     68  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     69  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     70  10000 ????				       ENDIF
     71  10000 ????						;-------------------------------------------------------------------------------
     72 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     73 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     74 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     75 U0000
     76 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     77 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     78 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     79 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     80 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     81 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     82 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     83 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     84 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     85 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     86 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     87 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
     88 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
     89 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
     90 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
     91 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
     92 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
     93 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
     94 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
     95 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
     96 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
     97 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
     98 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
     99 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    100 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    101 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    102 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    103 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    104 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    105 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    106 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    107 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    108 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    109 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    110 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    111 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    112 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    113 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    114 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    115 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    116 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    117 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    118 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    119 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    120 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    121 U002d
    122 U002d							;-------------------------------------------------------------------------------
    123 U000e ????				      SEG.U	TIA_REGISTERS_READ
    124 U0000					      ORG	TIA_BASE_READ_ADDRESS
    125 U0000							;											bit 7	 bit 6
    126 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    127 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    128 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    129 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    130 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    131 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    132 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    133 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    134 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    135 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    136 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    137 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    138 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    139 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    140 U000e							;-------------------------------------------------------------------------------
    141 U0298 ????				      SEG.U	RIOT
    142 U0280					      ORG	$280
    143 U0280
    144 U0280							; RIOT MEMORY MAP
    145 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    146 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    147 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    148 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    149 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    150 U0284		       00	   INTIM      ds	1	; $284		Timer output
    151 U0285		       00	   TIMINT     ds	1	; $285
    152 U0286							; Unused/undefined registers ($285-$294)
    153 U0286		       00		      ds	1	; $286
    154 U0287		       00		      ds	1	; $287
    155 U0288		       00		      ds	1	; $288
    156 U0289		       00		      ds	1	; $289
    157 U028a		       00		      ds	1	; $28A
    158 U028b		       00		      ds	1	; $28B
    159 U028c		       00		      ds	1	; $28C
    160 U028d		       00		      ds	1	; $28D
    161 U028e		       00		      ds	1	; $28E
    162 U028f		       00		      ds	1	; $28F
    163 U0290		       00		      ds	1	; $290
    164 U0291		       00		      ds	1	; $291
    165 U0292		       00		      ds	1	; $292
    166 U0293		       00		      ds	1	; $293
    167 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    168 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    169 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    170 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    171 U0298							;-------------------------------------------------------------------------------
    172 U0298							; The following required for back-compatibility with code which does not use
    173 U0298							; segments.
    174  0000 ????				      SEG
    175  0000 ????						; EOF
------- FILE bomber.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE bomber.asm
      6  0000 ????
      7  0000 ????						; Declare the variables starting from memory address $80
      8 U008f ????				      seg.u	Variables
      9 U0080					      org	$80
     10 U0080
     11 U0080		       00	   JetXPos    byte.b		; player0 x-position
     12 U0081		       00	   JetYPos    byte.b		; player0 y-position
     13 U0082		       00	   BomberXPos byte.b		; player1 x-position
     14 U0083		       00	   BomberYPos byte.b		; player1 y-position
     15 U0084		       00 00	   JetSpritePtr word.w		; pointer to player0 sprite table
     16 U0086		       00 00	   JetColorPtr word.w		; pointer to player0 color table
     17 U0088		       00 00	   BomberSpritePtr word.w		; pointer to player1 sprite table
     18 U008a		       00 00	   BomberColorPtr word.w		; pointer to player1 color table
     19 U008c		       00 00	   JetAnimationOffset word.w		; player0 sprite frame offset for amination
     20 U008e		       00	   Random     byte.b		; random number generated
     21 U008f
     22 U008f							; define constants
     23 U008f		       00 09	   JET_HEIGHT =	9	; player0 sprite hegiht 
     24 U008f		       00 09	   BOMBER_HEIGHT =	9	; player1 sprite hegiht
     25 U008f
     26 U008f							; Start our ROM code at memory address $F000
     27  10000 ????				       seg	code
     28  f000					      org	$F000
     29  f000
     30  f000				   Reset
      0  f000					      CLEAN_START		; class macro to reset memory and registers
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     32  f00b
     33  f00b							; initialize RAM variables and TIA registers
     34  f00b		       a9 0a		      lda	#10
     35  f00d		       85 81		      sta	JetYPos	; JetYPos = 10
     36  f00f		       a9 3c		      lda	#60
     37  f011		       85 80		      sta	JetXPos	; JetXPos = 60
     38  f013		       a9 53		      lda	#83
     39  f015		       85 83		      sta	BomberYPos	; BomberYPos = 83
     40  f017		       a9 36		      lda	#54
     41  f019		       85 82		      sta	BomberXPos	; BomberXPos = 54
     42  f01b
     43  f01b		       a9 d4		      lda	#%11010100
     44  f01d		       85 8e		      sta	Random	; Random = $D4
     45  f01f
     46  f01f							; initialize the pointers to the correct lookup table adresses
     47  f01f		       a9 bb		      lda	#<PlayerSprite0
     48  f021		       85 84		      sta	JetSpritePtr	; lo-byte pointer for jet sprite lookup table
     49  f023		       a9 f1		      lda	#>PlayerSprite0
     50  f025		       85 85		      sta	JetSpritePtr+1	; hi-byte pointer for jet sprite lookup table
     51  f027
     52  f027		       a9 cd		      lda	#<PlayerColor0
     53  f029		       85 86		      sta	JetColorPtr	; lo-byte pointer for jet color lookup table
     54  f02b		       a9 f1		      lda	#>PlayerColor0
     55  f02d		       85 87		      sta	JetColorPtr+1	; hi-byte pointer for jet color lookup table
     56  f02f
     57  f02f		       a9 df		      lda	#<BomberSprite
     58  f031		       85 88		      sta	BomberSpritePtr	; lo-byte pointer for bomber sprite lookup table
     59  f033		       a9 f1		      lda	#>BomberSprite
     60  f035		       85 89		      sta	BomberSpritePtr+1	; hi-byte pointer for bomber sprite lookup table
     61  f037
     62  f037		       a9 e8		      lda	#<BomberColor
     63  f039		       85 8a		      sta	BomberColorPtr	; lo-byte pointer for bomber color lookup table
     64  f03b		       a9 f1		      lda	#>BomberColor
     65  f03d		       85 8b		      sta	BomberColorPtr+1	; hi-byte pointer for bomber color lookup table
     66  f03f
     67  f03f							; Start the main display loop and frame rendering
     68  f03f				   StartFrame
     69  f03f
     70  f03f							; Calculate and tasks performed in the pre-VBLANK
     71  f03f		       a5 80		      lda	JetXPos
     72  f041		       a0 00		      ldy	#0
     73  f043		       20 89 f1 	      jsr	SetObjectXPos	; set player0 horizonta position
     74  f046
     75  f046		       a5 82		      lda	BomberXPos
     76  f048		       a0 01		      ldy	#1
     77  f04a		       20 89 f1 	      jsr	SetObjectXPos	; set player1 horizonta position
     78  f04d
     79  f04d		       85 02		      sta	WSYNC
     80  f04f		       85 2a		      sta	HMOVE	; apply the horizonta positions
     81  f051
     82  f051							; Display VSYNC and VBLANK
     83  f051		       a9 02		      lda	#2
     84  f053		       85 01		      sta	VBLANK	; turn on VBLANK
     85  f055		       85 00		      sta	VSYNC	; turn on VSYNC
     86  f057					      REPEAT	3
     87  f057		       85 02		      sta	WSYNC	; display the 3 recomended line of VSYNC
     86  f057					      REPEND
     87  f059		       85 02		      sta	WSYNC	; display the 3 recomended line of VSYNC
     86  f059					      REPEND
     87  f05b		       85 02		      sta	WSYNC	; display the 3 recomended line of VSYNC
     88  f05d					      REPEND
     89  f05d		       a9 00		      lda	#0
     90  f05f		       85 00		      sta	VSYNC	; turn off VSYNC
     91  f061
     92  f061					      REPEAT	37
     93  f061		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
     92  f061					      REPEND
     93  f063		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
     92  f063					      REPEND
     93  f065		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
     92  f065					      REPEND
     93  f067		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
     92  f067					      REPEND
     93  f069		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
     92  f069					      REPEND
     93  f06b		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
     92  f06b					      REPEND
     93  f06d		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
     92  f06d					      REPEND
     93  f06f		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
     92  f06f					      REPEND
     93  f071		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
     92  f071					      REPEND
     93  f073		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
     92  f073					      REPEND
     93  f075		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
     92  f075					      REPEND
     93  f077		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
     92  f077					      REPEND
     93  f079		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
     92  f079					      REPEND
     93  f07b		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
     92  f07b					      REPEND
     93  f07d		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
     92  f07d					      REPEND
     93  f07f		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
     92  f07f					      REPEND
     93  f081		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
     92  f081					      REPEND
     93  f083		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
     92  f083					      REPEND
     93  f085		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
     92  f085					      REPEND
     93  f087		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
     92  f087					      REPEND
     93  f089		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
     92  f089					      REPEND
     93  f08b		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
     92  f08b					      REPEND
     93  f08d		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
     92  f08d					      REPEND
     93  f08f		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
     92  f08f					      REPEND
     93  f091		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
     92  f091					      REPEND
     93  f093		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
     92  f093					      REPEND
     93  f095		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
     92  f095					      REPEND
     93  f097		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
     92  f097					      REPEND
     93  f099		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
     92  f099					      REPEND
     93  f09b		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
     92  f09b					      REPEND
     93  f09d		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
     92  f09d					      REPEND
     93  f09f		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
     92  f09f					      REPEND
     93  f0a1		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
     92  f0a1					      REPEND
     93  f0a3		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
     92  f0a3					      REPEND
     93  f0a5		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
     92  f0a5					      REPEND
     93  f0a7		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
     92  f0a7					      REPEND
     93  f0a9		       85 02		      sta	WSYNC	; display the 37 recomended line of VSYNC
     94  f0ab					      REPEND
     95  f0ab		       85 01		      sta	VBLANK	; turn off VBLANK
     96  f0ad
     97  f0ad							; Display the 96 visible scan lines of our main game (beacouse 2-line kernel) 
     98  f0ad				   GameVisibleLines
     99  f0ad		       a9 84		      lda	#$84	; set color background blue
    100  f0af		       85 09		      sta	COLUBK
    101  f0b1		       a9 c2		      lda	#$C2	; set the playfield/grass color to green
    102  f0b3		       85 08		      sta	COLUPF
    103  f0b5
    104  f0b5		       a9 01		      lda	#%00000001	; enable playfield reflection
    105  f0b7		       85 0a		      sta	CTRLPF
    106  f0b9
    107  f0b9		       a9 f0		      lda	#$F0
    108  f0bb		       85 0d		      sta	PF0
    109  f0bd		       a9 fc		      lda	#$FC
    110  f0bf		       85 0e		      sta	PF1
    111  f0c1		       a9 00		      lda	#0
    112  f0c3		       85 0f		      sta	PF2
    113  f0c5
    114  f0c5		       a2 60		      ldx	#96	; X count the number of remainig scanlines
    115  f0c7				   .GameLineLoop
    116  f0c7
    117  f0c7							;********************************************************************************
    118  f0c7				   .AreWeInsideJetSprite
    119  f0c7		       8a		      txa		; transfer x to A
    120  f0c8		       38		      sec		; make sure the carry flag is set before subtraction
    121  f0c9		       e5 81		      sbc	JetYPos	; subtract sprite Y-coord
    122  f0cb		       c5 09		      cmp	JET_HEIGHT	; are we inside the sprite
    123  f0cd		       90 02		      bcc	.DrawSpriteP0	; if result < SpriteHeight, call the draw routine
    124  f0cf		       a9 00		      lda	#0	; else, set lookup index to zero
    125  f0d1				   .DrawSpriteP0
    126  f0d1		       18		      clc		; clear carry-flag before addition
    127  f0d2		       65 8c		      adc	JetAnimationOffset	; jump to the correct sprite frame address in memory 
    128  f0d4		       a8		      tay		; load Y so we can work whit the pointer
    129  f0d5		       b1 84		      lda	(JetSpritePtr),Y	; load player0 bitmap from lookup table
    130  f0d7		       85 02		      sta	WSYNC	; wait for scanLine
    131  f0d9		       85 1b		      sta	GRP0	; set graphics for player0
    132  f0db		       b1 86		      lda	(JetColorPtr),Y	; load player0 color from lookup table
    133  f0dd		       85 06		      sta	COLUP0	; set color for player0
    134  f0df							;********************************************************************************
    135  f0df				   .AreWeInsideBomberSprite
    136  f0df		       8a		      txa		; transfer x to A
    137  f0e0		       38		      sec		; make sure the carry flag is set before subtraction
    138  f0e1		       e5 83		      sbc	BomberYPos	; subtract sprite Y-coord
    139  f0e3		       c5 09		      cmp	BOMBER_HEIGHT	; are we inside the sprite
    140  f0e5		       90 02		      bcc	.DrawSpriteP1	; if result < SpriteHeight, call the draw routine
    141  f0e7		       a9 00		      lda	#0	; else, set lookup index to zero
    142  f0e9				   .DrawSpriteP1
    143  f0e9		       a8		      tay		; load Y so we can work whit the pointer
    144  f0ea
    145  f0ea		       a9 05		      lda	#%00000101
    146  f0ec		       85 05		      sta	NUSIZ1	; stretch player 1 sprite
    147  f0ee
    148  f0ee		       b1 88		      lda	(BomberSpritePtr),Y	; load player1 bitmap from lookup table
    149  f0f0		       85 02		      sta	WSYNC	; wait for scanLine
    150  f0f2		       85 1c		      sta	GRP1	; set graphics for player1
    151  f0f4		       b1 8a		      lda	(BomberColorPtr),Y	; load player1 color from lookup table
    152  f0f6		       85 07		      sta	COLUP1	; set color for player1
    153  f0f8							;********************************************************************************
    154  f0f8
    155  f0f8		       ca		      dex		; X--
    156  f0f9		       d0 cc		      bne	.GameLineLoop	; repeat next main game scanline until finished
    157  f0fb
    158  f0fb		       a9 00		      lda	#0
    159  f0fd		       85 8c		      sta	JetAnimationOffset
    160  f0ff
    161  f0ff							; Display Overscan
    162  f0ff		       a9 02		      lda	#2
    163  f101		       85 01		      sta	VBLANK	; turn on VBLANK again
    164  f103					      REPEAT	30
    165  f103		       85 02		      sta	WSYNC	; Display 30 recomended scanlines
    164  f103					      REPEND
    165  f105		       85 02		      sta	WSYNC	; Display 30 recomended scanlines
    164  f105					      REPEND
    165  f107		       85 02		      sta	WSYNC	; Display 30 recomended scanlines
    164  f107					      REPEND
    165  f109		       85 02		      sta	WSYNC	; Display 30 recomended scanlines
    164  f109					      REPEND
    165  f10b		       85 02		      sta	WSYNC	; Display 30 recomended scanlines
    164  f10b					      REPEND
    165  f10d		       85 02		      sta	WSYNC	; Display 30 recomended scanlines
    164  f10d					      REPEND
    165  f10f		       85 02		      sta	WSYNC	; Display 30 recomended scanlines
    164  f10f					      REPEND
    165  f111		       85 02		      sta	WSYNC	; Display 30 recomended scanlines
    164  f111					      REPEND
    165  f113		       85 02		      sta	WSYNC	; Display 30 recomended scanlines
    164  f113					      REPEND
    165  f115		       85 02		      sta	WSYNC	; Display 30 recomended scanlines
    164  f115					      REPEND
    165  f117		       85 02		      sta	WSYNC	; Display 30 recomended scanlines
    164  f117					      REPEND
    165  f119		       85 02		      sta	WSYNC	; Display 30 recomended scanlines
    164  f119					      REPEND
    165  f11b		       85 02		      sta	WSYNC	; Display 30 recomended scanlines
    164  f11b					      REPEND
    165  f11d		       85 02		      sta	WSYNC	; Display 30 recomended scanlines
    164  f11d					      REPEND
    165  f11f		       85 02		      sta	WSYNC	; Display 30 recomended scanlines
    164  f11f					      REPEND
    165  f121		       85 02		      sta	WSYNC	; Display 30 recomended scanlines
    164  f121					      REPEND
    165  f123		       85 02		      sta	WSYNC	; Display 30 recomended scanlines
    164  f123					      REPEND
    165  f125		       85 02		      sta	WSYNC	; Display 30 recomended scanlines
    164  f125					      REPEND
    165  f127		       85 02		      sta	WSYNC	; Display 30 recomended scanlines
    164  f127					      REPEND
    165  f129		       85 02		      sta	WSYNC	; Display 30 recomended scanlines
    164  f129					      REPEND
    165  f12b		       85 02		      sta	WSYNC	; Display 30 recomended scanlines
    164  f12b					      REPEND
    165  f12d		       85 02		      sta	WSYNC	; Display 30 recomended scanlines
    164  f12d					      REPEND
    165  f12f		       85 02		      sta	WSYNC	; Display 30 recomended scanlines
    164  f12f					      REPEND
    165  f131		       85 02		      sta	WSYNC	; Display 30 recomended scanlines
    164  f131					      REPEND
    165  f133		       85 02		      sta	WSYNC	; Display 30 recomended scanlines
    164  f133					      REPEND
    165  f135		       85 02		      sta	WSYNC	; Display 30 recomended scanlines
    164  f135					      REPEND
    165  f137		       85 02		      sta	WSYNC	; Display 30 recomended scanlines
    164  f137					      REPEND
    165  f139		       85 02		      sta	WSYNC	; Display 30 recomended scanlines
    164  f139					      REPEND
    165  f13b		       85 02		      sta	WSYNC	; Display 30 recomended scanlines
    164  f13b					      REPEND
    165  f13d		       85 02		      sta	WSYNC	; Display 30 recomended scanlines
    166  f13f					      REPEND
    167  f13f		       a9 00		      lda	#0
    168  f141		       85 01		      sta	VBLANK	; turn off VBLANK
    169  f143
    170  f143							; Process joystick input for player0
    171  f143				   CheckP0Up
    172  f143		       a9 10		      lda	#%00010000	; player0 joystick up
    173  f145		       2c 80 02 	      bit	SWCHA
    174  f148		       d0 06		      bne	CheckP0Down	; if bit pattern doesnt match bypass
    175  f14a		       e6 81		      inc	JetYPos
    176  f14c		       a9 00		      lda	#0
    177  f14e		       85 8c		      sta	JetAnimationOffset
    178  f150
    179  f150				   CheckP0Down
    180  f150		       a9 20		      lda	#%00100000
    181  f152		       2c 80 02 	      bit	SWCHA
    182  f155		       d0 06		      bne	CheckP0Left
    183  f157		       c6 81		      dec	JetYPos
    184  f159		       a9 00		      lda	#0
    185  f15b		       85 8c		      sta	JetAnimationOffset
    186  f15d
    187  f15d				   CheckP0Left
    188  f15d		       a9 40		      lda	#%01000000
    189  f15f		       2c 80 02 	      bit	SWCHA
    190  f162		       d0 06		      bne	CheckP0Right
    191  f164		       c6 80		      dec	JetXPos
    192  f166		       a5 09		      lda	JET_HEIGHT	; 9
    193  f168		       85 8c		      sta	JetAnimationOffset	; set JetAnimationOffset to the second frame
    194  f16a
    195  f16a				   CheckP0Right
    196  f16a		       a9 80		      lda	#%10000000
    197  f16c		       2c 80 02 	      bit	SWCHA
    198  f16f		       d0 06		      bne	EndInput
    199  f171		       e6 80		      inc	JetXPos
    200  f173		       a5 09		      lda	JET_HEIGHT	; 9
    201  f175		       85 8c		      sta	JetAnimationOffset	; set JetAnimationOffset to the second frame
    202  f177
    203  f177				   EndInput		; fallback when no input
    204  f177
    205  f177							; Calculations to update positions form next frame
    206  f177				   UpdateBomberPosition
    207  f177		       a5 83		      lda	BomberYPos
    208  f179		       18		      clc
    209  f17a		       c9 00		      cmp	#0	; compare bomber Y position whit zero
    210  f17c		       30 05		      bmi	.ResetBomberPosition	; if is < 0, reset y pos back to the top
    211  f17e		       c6 83		      dec	BomberYPos	; else, decrement enemy y position
    212  f180		       4c 86 f1 	      jmp	EndPositionUpdate
    213  f183				   .ResetBomberPosition
    214  f183		       20 9d f1 	      jsr	GetRandomBomberPosition	; call subroutine for next random enemy x position
    215  f186
    216  f186				   EndPositionUpdate		; fallback for the position update
    217  f186
    218  f186							; Loop back to Start a brand new frame
    219  f186		       4c 3f f0 	      jmp	StartFrame	; continue to display next frame
    220  f189
    221  f189							; subroutine to handle horizonta position
    222  f189				   SetObjectXPos subroutine
    223  f189		       85 02		      sta	WSYNC	; start a fresh new scanline
    224  f18b		       38		      sec		; make sure carry-flag is set before subs
    225  f18c				   .Div15Loop
    226  f18c		       e9 0f		      sbc	#15	; subtract 15 from the accumulator
    227  f18e		       b0 fc		      bcs	.Div15Loop	; loop until carry-flag is clear
    228  f190		       49 07		      eor	#7	; handle offset range from -8 to 7
    229  f192		       0a		      asl
    230  f193		       0a		      asl
    231  f194		       0a		      asl
    232  f195		       0a		      asl		; four shift lefts to get only the top 4 bits
    233  f196		       99 20 00 	      sta	HMP0,Y	; store the fine offset to the correct HMxx
    234  f199		       99 10 00 	      sta	RESP0,Y	; fix object position in 15-step increment
    235  f19c		       60		      rts
    236  f19d
    237  f19d							; subroutine to generate random number
    238  f19d				   GetRandomBomberPosition subroutine
    239  f19d		       a5 8e		      lda	Random
    240  f19f		       0a		      asl
    241  f1a0		       45 8e		      eor	Random
    242  f1a2		       0a		      asl
    243  f1a3		       45 8e		      eor	Random
    244  f1a5		       0a		      asl
    245  f1a6		       0a		      asl
    246  f1a7		       45 8e		      eor	Random
    247  f1a9		       0a		      asl
    248  f1aa		       26 8e		      rol	Random
    249  f1ac
    250  f1ac		       4a		      lsr
    251  f1ad		       4a		      lsr		; divide the value by 4 with 2 right shift
    252  f1ae		       85 82		      sta	BomberXPos	; save it to the variable BomberXPos
    253  f1b0		       a9 1e		      lda	#30
    254  f1b2		       65 82		      adc	BomberXPos	; adds 30 + BomberXPos to compensate for left PF
    255  f1b4		       85 82		      sta	BomberXPos	; sets the new value to the BomberXPos
    256  f1b6
    257  f1b6		       a9 60		      lda	#96
    258  f1b8		       85 83		      sta	BomberYPos	; sets the BomberYPos to the top of the screen
    259  f1ba		       60		      rts
    260  f1bb
    261  f1bb
    262  f1bb							; Declare ROM lookup tables
    263  f1bb				   PlayerSprite0
    264  f1bb		       00		      .byte.b	#%00000000
    265  f1bc		       44		      .byte.b	#%01000100
    266  f1bd		       7c		      .byte.b	#%01111100
    267  f1be		       38		      .byte.b	#%00111000
    268  f1bf		       38		      .byte.b	#%00111000
    269  f1c0		       38		      .byte.b	#%00111000
    270  f1c1		       10		      .byte.b	#%00010000
    271  f1c2		       10		      .byte.b	#%00010000
    272  f1c3		       10		      .byte.b	#%00010000
    273  f1c4				   PlayerSprite1
    274  f1c4		       00		      .byte.b	#%00000000
    275  f1c5		       28		      .byte.b	#%00101000
    276  f1c6		       38		      .byte.b	#%00111000
    277  f1c7		       38		      .byte.b	#%00111000
    278  f1c8		       38		      .byte.b	#%00111000
    279  f1c9		       10		      .byte.b	#%00010000
    280  f1ca		       10		      .byte.b	#%00010000
    281  f1cb		       10		      .byte.b	#%00010000
    282  f1cc		       10		      .byte.b	#%00010000
    283  f1cd				   PlayerColor0
    284  f1cd		       00		      .byte.b	#$00
    285  f1ce		       06		      .byte.b	#$06
    286  f1cf		       08		      .byte.b	#$08
    287  f1d0		       0e		      .byte.b	#$0E
    288  f1d1		       0c		      .byte.b	#$0C
    289  f1d2		       42		      .byte.b	#$42
    290  f1d3		       1a		      .byte.b	#$1A
    291  f1d4		       08		      .byte.b	#$08
    292  f1d5		       0c		      .byte.b	#$0C
    293  f1d6				   PlayerColor1
    294  f1d6		       00		      .byte.b	#$00
    295  f1d7		       06		      .byte.b	#$06
    296  f1d8		       08		      .byte.b	#$08
    297  f1d9		       0e		      .byte.b	#$0E
    298  f1da		       0c		      .byte.b	#$0C
    299  f1db		       42		      .byte.b	#$42
    300  f1dc		       1a		      .byte.b	#$1A
    301  f1dd		       08		      .byte.b	#$08
    302  f1de		       0c		      .byte.b	#$0C
    303  f1df				   BomberSprite
    304  f1df		       00		      .byte.b	#%00000000
    305  f1e0		       08		      .byte.b	#%00001000
    306  f1e1		       5d		      .byte.b	#%01011101
    307  f1e2		       3e		      .byte.b	#%00111110
    308  f1e3		       1c		      .byte.b	#%00011100
    309  f1e4		       5d		      .byte.b	#%01011101
    310  f1e5		       49		      .byte.b	#%01001001
    311  f1e6		       3e		      .byte.b	#%00111110
    312  f1e7		       1c		      .byte.b	#%00011100
    313  f1e8				   BomberColor
    314  f1e8		       00		      .byte.b	#$00
    315  f1e9		       30		      .byte.b	#$30
    316  f1ea		       42		      .byte.b	#$42
    317  f1eb		       46		      .byte.b	#$46
    318  f1ec		       8a		      .byte.b	#$8A
    319  f1ed		       42		      .byte.b	#$42
    320  f1ee		       42		      .byte.b	#$42
    321  f1ef		       48		      .byte.b	#$48
    322  f1f0		       32		      .byte.b	#$32
    323  f1f1
    324  f1f1							; Complete ROM size with 4KB
    325  fffc					      org	$FFFC	; move origin to position $FFFC
    326  fffc		       00 f0		      word.w	Reset	; write 2 bytes with the program reset address
    327  fffe		       00 f0		      word.w	Reset
